// =============================
// üó∫Ô∏è Decode .pbf tiles ‚Üí GeoJSON (k√®m raw info)
// =============================

import fs from "fs";
import path from "path";
import { VectorTile } from "@mapbox/vector-tile";
import Protobuf from "pbf";

// üß≠ Th∆∞ m·ª•c ch·ª©a tiles
const TILE_ROOT = "./tiles_out_from_har/composite/";
// üß© Layer c·∫ßn export
const TARGET_LAYER = "point_map";
// üì¶ File ƒë·∫ßu ra
const OUTPUT_FILE = "output.geojson";

// === ƒê·ªá quy l·∫•y danh s√°ch file .pbf ===
function getAllPBFs(dir) {
  let results = [];
  const list = fs.readdirSync(dir);
  for (const file of list) {
    const fullPath = path.join(dir, file);
    const stat = fs.statSync(fullPath);
    if (stat.isDirectory()) {
      results = results.concat(getAllPBFs(fullPath));
    } else if (file.endsWith(".pbf")) {
      results.push(fullPath);
    }
  }
  return results;
}

// === H√†m decode 1 file ===
function decodePBF(filePath) {
  const data = fs.readFileSync(filePath);
  return new VectorTile(new Protobuf(data));
}

// === In ra th√¥ng tin raw c·ªßa 1 tile ===
function logRawTileInfo(tile, filePath) {
  console.log(`\nüìÇ [RAW] File: ${filePath}`);
  const layerNames = Object.keys(tile.layers);
  console.log(`   üß© Layers: ${layerNames.join(", ")}`);

  for (const layerName of layerNames) {
    const layer = tile.layers[layerName];
    console.log(`   ‚îú‚îÄ‚îÄ Layer "${layerName}" ‚Üí ${layer.length} features`);
    if (layer.length > 0) {
      const sample = layer.feature(0);
      const geomType = ["Unknown", "Point", "LineString", "Polygon"][sample.type] || "Unknown";
      console.log(`   ‚îÇ   ‚îú‚îÄ Geometry type: ${geomType}`);
      console.log(`   ‚îÇ   ‚îú‚îÄ Sample properties:`, sample.properties);
    }
  }
}

// === Chuy·ªÉn feature ‚Üí GeoJSON ===
function featureToGeoJSON(feature, tileX, tileY, zoom) {
  try {
    // ƒê·∫£o Y (v√¨ Goong c√≥ th·ªÉ d√πng TMS)
    const tileY_XYZ = Math.pow(2, zoom) - 1 - tileY;
    return feature.toGeoJSON(tileX, tileY_XYZ, zoom);
  } catch (err) {
    console.warn("‚ö†Ô∏è L·ªói decode feature:", err);
    return null;
  }
}

// === GeoJSON container ===
const geojson = { type: "FeatureCollection", features: [] };

// === B·∫Øt ƒë·∫ßu decode ===
const files = getAllPBFs(TILE_ROOT);
console.log(`üß© T·ªïng s·ªë file .pbf: ${files.length}`);

for (const file of files) {
  const parts = path.relative(TILE_ROOT, file).split(path.sep);
  if (parts.length !== 3) {
    console.warn("‚ö†Ô∏è B·ªè qua (sai c·∫•u tr√∫c Z/X/Y.pbf):", file);
    continue;
  }

  const zoom = parseInt(parts[0]);
  const tileX = parseInt(parts[1]);
  const tileY = parseInt(parts[2].replace(".pbf", ""));

  const tile = decodePBF(file);
  logRawTileInfo(tile, file); // üßæ in th√¥ng tin raw

  // Decode layer c·∫ßn thi·∫øt
  if (!tile.layers[TARGET_LAYER]) continue;
  const layer = tile.layers[TARGET_LAYER];

  for (let i = 0; i < layer.length; i++) {
    const f = layer.feature(i);
    const geo = featureToGeoJSON(f, tileX, tileY, zoom);
    if (geo) geojson.features.push(geo);
  }
}

// === Xu·∫•t file GeoJSON ===
fs.writeFileSync(OUTPUT_FILE, JSON.stringify(geojson, null, 2));
console.log(`‚úÖ Ho√†n t·∫•t! ƒê√£ xu·∫•t ${geojson.features.length} features ‚Üí ${OUTPUT_FILE}`);
